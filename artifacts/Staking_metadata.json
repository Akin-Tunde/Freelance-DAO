{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardsTokenAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "rewardsToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakedBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalStaked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A contract that allows users to stake the PlatformToken (ARCH). Staking can be used for multiple purposes, such as earning rewards, gaining eligibility to become a dispute resolution juror, or getting reduced platform fees. This contract uses the ReentrancyGuard to prevent re-entrancy attacks on staking/unstaking.",
			"errors": {
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Sets the immutable token addresses for staking and rewards.",
					"params": {
						"_rewardsTokenAddress": "The address of the token for rewards distribution.",
						"_stakingTokenAddress": "The address of the PlatformToken."
					}
				},
				"stake(uint256)": {
					"details": "The user must first call `approve` on the staking token contract to authorize      this contract to manage their tokens. `nonReentrant` modifier prevents re-entrancy attacks.",
					"params": {
						"_amount": "The amount of tokens to stake."
					}
				},
				"unstake(uint256)": {
					"details": "`nonReentrant` modifier prevents re-entrancy attacks.",
					"params": {
						"_amount": "The amount of tokens to unstake."
					}
				}
			},
			"title": "Staking",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"stake(uint256)": {
					"notice": "Stakes a specified amount of the staking token."
				},
				"unstake(uint256)": {
					"notice": "Unstakes a specified amount of the staking token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Financial/Staking.sol": "Staking"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
				"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"contracts/Financial/Staking.sol": {
			"keccak256": "0x5b0ce7d042e2700c724d65ba7a0068135d2f5ebcacdbd63e940d25f01ead9a91",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c93b971f06a73a7d253d9b53a0f3baba52e3a80c571e99ccb5fd73e5c70b881",
				"dweb:/ipfs/Qmbxs75SvTAkRt9haWXXFhPqjTFUhTQN8ByWkWcSZF7Xap"
			]
		}
	},
	"version": 1
}