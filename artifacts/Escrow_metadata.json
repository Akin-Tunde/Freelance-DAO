{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_depositor",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "DisputeResolved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Funded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "LockedForDispute",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Refunded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Released",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "amount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beneficiary",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositor",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "disputeResolver",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fund",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lockForDispute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "release",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "resolveDispute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_resolver",
						"type": "address"
					}
				],
				"name": "setDisputeResolver",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "state",
				"outputs": [
					{
						"internalType": "enum Escrow.EscrowState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract acts as a neutral third party to hold funds for a specific project. It is created by a Project contract when a freelancer is hired. Its logic is simple and focused: receive funds, hold them, and release them only upon proper authorization or after a dispute resolution.",
			"kind": "dev",
			"methods": {
				"fund()": {
					"details": "This function uses `transferFrom`, meaning the depositor must have first      called `approve` on the token contract to allow this Escrow contract      to pull the funds from their wallet."
				},
				"release()": {
					"details": "This function can only be called by the depositor (owner), which in our      system is triggered by the `acceptWork` function in the Project contract."
				},
				"resolveDispute(address)": {
					"params": {
						"winner": "The address of the party who won the dispute."
					}
				},
				"setDisputeResolver(address)": {
					"details": "This is a critical step that connects the escrow to the platform's judiciary system.      It can only be set once."
				}
			},
			"title": "Escrow",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"fund()": {
					"notice": "The first step where the project owner funds the escrow."
				},
				"lockForDispute()": {
					"notice": "Locks the funds if a dispute is raised in the Project contract."
				},
				"release()": {
					"notice": "Releases the funds to the beneficiary (freelancer)."
				},
				"resolveDispute(address)": {
					"notice": "The final resolution of a dispute, called only by the official DisputeResolution contract."
				},
				"setDisputeResolver(address)": {
					"notice": "Allows the depositor to set the address of the DisputeResolution contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/core/Escrow.sol": "Escrow"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
				"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
			]
		},
		"contracts/core/Escrow.sol": {
			"keccak256": "0xedd7fddeb82b0508983d70b7351a5947ed44c095011d19e90862713f08d27fe4",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f76c21afff1c3af497db1dc7c9d7699c85f42cda6c6f2f300dd871ef6f1ece5",
				"dweb:/ipfs/QmbnaNe1j3sMpdLmZkcsJthd3fsoVjqjajMyrofGcH2UBp"
			]
		}
	},
	"version": 1
}